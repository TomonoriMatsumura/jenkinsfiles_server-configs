#!groovy

pipeline {

  agent any

  parameters {
    string(
      name: 'ANSIBLE_PLAYBOOK',
      defaultValue: '',
      description: 'Ansible playbook name'
    )
    password(
      name: 'EXTRA_ARGS',
      defaultValue: '',
      description: 'Ansible playbook extra arguments'
    )
    string(
      name: 'GIT_BRANCH_ANSIBLE',
      defaultValue: 'topic',
      description: 'Git branch name of ansible GitHub TomonoriMatsumura repository'
    )
    credentials(
      name: 'INVENTORY',
      defaultValue: '',
      description: '',
    )
    string(
      name: 'WORKING_DIR',
      defaultValue: '/tmp/git-repo',
      description: 'Job working directory'
    )
  }

  stages {
    stage('Retrive source code from Github') {
      steps {
        sh "sudo -u ansible rm -rf ${params.WORKING_DIR}"
        sh "sudo -u ansible mkdir ${params.WORKING_DIR}"
        sh "sudo -u ansible git clone https://github.com/TomonoriMatsumura/ansible.git -b ${params.GIT_BRANCH_ANSIBLE} ${params.WORKING_DIR}"
      }
    }

    stage('Configure ansible inventory file') {
      steps {
        wrap([$class: 'MaskPasswordsBuildWrapper']) {
          sh "rm -rf /tmp${params.WORKING_DIR}"
          sh "mkdir -p /tmp${params.WORKING_DIR}/inventories"
          sh "touch /tmp${params.WORKING_DIR}/inventories/host"
          sh "cat ${params.INVENTORY} > /tmp${params.WORKING_DIR}/inventories/host"
        }
      }
    }

    stage('excute ansible-playbook command') {
      steps {
        wrap([$class: 'MaskPasswordsBuildWrapper']) {
          sh "sudo -u ansible ansible-playbook ${params.WORKING_DIR}/${params.ANSIBLE_PLAYBOOK}.yml \
              -i /tmp${params.WORKING_DIR}/inventories/host \
              ${params.EXTRA_ARGS} \
              | sudo -u ansible tee ${params.WORKING_DIR}/.ansible.log"
        }
      }
    }

    stage('Analyze Ansible log and output result') {
      steps {
        script {

          def output = sh(
                          returnStdout: true,
                          script: "sudo -u ansible tail -n 2 ${params.WORKING_DIR}/.ansible.log"
                       )

          if (output.contains("unreachable=0") && output.contains("failed=0")) {
            sh "echo success"
          } else {
            error "ansible-playbook error\n$output"
          }
        }
      }
    }
  }
}
