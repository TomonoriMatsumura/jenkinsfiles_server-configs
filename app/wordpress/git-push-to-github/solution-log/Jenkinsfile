#!groovy

pipeline {

  agent any

  environment {
    ANSIBLE_HOST = credentials('app_ip_address')

    ANSIBLE_PORT = credentials('ansible_port')

    GIT_REPO = "ssh://wpbackup@${env.ANSIBLE_HOST}:${env.ANSIBLE_PORT}/home/wpbackup/git/solution-log"
  }

  parameters {
    string(
      name: 'GIT_RETRIEVE_BRANCH',
      defaultValue: 'master',
      description: 'Git branch to retrieve'
    )
    string(
      name: 'GIT_PUSH_BRANCH',
      defaultValue: 'test',
      description: 'Git Repo branch to push'
    )
    string(
      name: 'GIT_COMMIT_MSG',
      defaultValue: 'this is test commit',
      description: 'Commit message to excute git push to https://github.com/TomonoriMatsumura/wp_solution-log'
    )
  }

  stages {
    stage('Retrive source code from Git Server') {
      steps {
        sh "git clone ${env.GIT_REPO} -b ${params.GIT_RETRIEVE_BRANCH}"
        dir("solution-log") {
          sh "git checkout -b ${params.GIT_PUSH_BRANCH} ${params.GIT_RETRIEVE_BRANCH}"
          sh "rm -rf *"
        }
      }
    }

    stage('Retrive Wordpress backup data from wordpress running site') {
      steps {
        dir("solution-log") {
          sh "scp -P ${env.ANSIBLE_PORT} wpbackup@${env.ANSIBLE_HOST}:/home/wpbackup/solution-log/wp-content.tar.gz ./"
          sh "scp -P ${env.ANSIBLE_PORT} wpbackup@${env.ANSIBLE_HOST}:/home/wpbackup/solution-log/wordpress.sql ./"
          sh "tar xfvz wp-content.tar.gz"
          sh "rm -rf wp-content.tar.gz"
        }
      }
    }

    stage('Git push') {
      steps {
        dir("solution-log") {
          sh "git add -A"
          sh "git commit -m '${params.GIT_COMMIT_MSG}'"
          sh "git push origin ${params.GIT_PUSH_BRANCH}"
        }
      }
    }
  }

  post {
    always {
      cleanWs()
    }
  }
}
